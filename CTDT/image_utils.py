import os
import json
import faiss
import numpy as np
import torch
import clip
from PIL import Image
from django.conf import settings
from collections import OrderedDict


device = "cpu"
model, preprocess = clip.load("ViT-B/32", device)

index = faiss.IndexFlatL2(512)
labels = []
image_paths = []

INDEX_FILE = os.path.join(settings.MEDIA_ROOT, 'image_vectors.index')
LABEL_FILE = os.path.join(settings.MEDIA_ROOT, 'image_labels.json')
PATH_FILE = os.path.join(settings.MEDIA_ROOT, 'image_paths.json')

def load_index():
    global index, labels, image_paths
    if os.path.exists(INDEX_FILE):
        index = faiss.read_index(INDEX_FILE)
    if os.path.exists(LABEL_FILE):
        with open(LABEL_FILE, "r") as f:
            labels = json.load(f)
    if os.path.exists(PATH_FILE):
        with open(PATH_FILE, "r") as f:
            image_paths = json.load(f)

def save_index():
    faiss.write_index(index, INDEX_FILE)
    with open(LABEL_FILE, "w") as f:
        json.dump(labels, f)
    with open(PATH_FILE, "w") as f:
        json.dump(image_paths, f)

def add_image_to_index(image_path, label):
    global index, labels, image_paths
    try:
        image = preprocess(Image.open(image_path)).unsqueeze(0).to(device)
        with torch.no_grad():
            vector = model.encode_image(image).cpu().numpy()
        index.add(vector)
        labels.append(label)
        image_paths.append(image_path)
        save_index()
    except Exception as e:
        print(f"L·ªói khi th√™m ·∫£nh {image_path}: {e}")

# def remove_image_from_index(image_path):
#     global index, labels, image_paths
#     if image_path in image_paths:
#         idx = image_paths.index(image_path)
#         del labels[idx]
#         del image_paths[idx]
        
#         new_index = faiss.IndexFlatL2(512)
#         for path in image_paths:
#             image = preprocess(Image.open(path)).unsqueeze(0).to(device)
#             with torch.no_grad():
#                 vector = model.encode_image(image).cpu().numpy()
#             new_index.add(vector)
        
#         index = new_index
#         save_index()

def remove_image_from_index(image_path):
    global index, labels, image_paths
    if image_path in image_paths:
        idx = image_paths.index(image_path)
        del labels[idx]
        del image_paths[idx]
        
        new_index = faiss.IndexFlatL2(512)
        for path in image_paths:
            if os.path.exists(path):  # ‚úÖ Th√™m ki·ªÉm tra n√†y
                try:
                    image = preprocess(Image.open(path)).unsqueeze(0).to(device)
                    with torch.no_grad():
                        vector = model.encode_image(image).cpu().numpy()
                    new_index.add(vector)
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh {path}: {e}")
            else:
                print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i, b·ªè qua: {path}")
        
        index = new_index
        save_index()

# def search_similar_images(image_path, threshold=0.7):
#     load_index()
#     similar_images = []
#     image = preprocess(Image.open(image_path)).unsqueeze(0).to(device)
#     with torch.no_grad():
#         vector = model.encode_image(image).cpu().numpy()
    
#     if not labels:  # Ki·ªÉm tra n·∫øu labels r·ªóng
#         print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong labels.json, kh√¥ng th·ªÉ t√¨m ki·∫øm.")
#         return similar_images
#     else:
#         distances, indices = index.search(vector, len(labels))
#     # distances, indices = index.search(vector, len(labels))
    
#     # for i, idx in enumerate(indices[0]):
#     #     if distances[0][i] < threshold:
#     #         similar_images.append((labels[idx], image_paths[idx], distances[0][i]))
#     for i, idx in enumerate(indices[0]):
#         if idx < len(labels) and idx < len(image_paths):
#             if distances[0][i] < threshold:
#                 similar_images.append((labels[idx], image_paths[idx], distances[0][i]))
#         else:
#             print(f"‚ö†Ô∏è L·ªói: idx={idx} v∆∞·ª£t qu√° labels/image_paths. T·ªïng s·ªë labels={len(labels)}.")
    
#     return similar_images

def search_similar_images(image_path, threshold=0.7):
    load_index()
    similar_images = []
    image = preprocess(Image.open(image_path)).unsqueeze(0).to(device)
    with torch.no_grad():
        vector = model.encode_image(image).cpu().numpy()

    if not labels or not image_paths or index.ntotal == 0:
        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong index ho·∫∑c labels, kh√¥ng th·ªÉ t√¨m ki·∫øm.")
        return similar_images

    distances, indices = index.search(vector, len(labels))

    for i, idx in enumerate(indices[0]):
        if idx < len(labels) and idx < len(image_paths):
            if distances[0][i] < threshold:
                similar_images.append((labels[idx], image_paths[idx], distances[0][i]))
        else:
            print(f"‚ö†Ô∏è L·ªói: idx={idx} v∆∞·ª£t qu√° gi·ªõi h·∫°n. labels={len(labels)}, image_paths={len(image_paths)}")

    return similar_images




# H√†m ki·ªÉm tra v√† ch·ªâ th√™m n·∫øu kh√¥ng tr√πng

def check_and_add_image(image_path, label, threshold=0.7):
    similar_images = search_similar_images(image_path, threshold)
    if similar_images:
        print("‚ö†Ô∏è ·∫¢nh ƒë√£ t·ªìn t·∫°i:", similar_images)
        return False
    add_image_to_index(image_path, label)
    return True

def clean_index():
    global index, labels, image_paths
    print("üßπ ƒêang d·ªçn d·∫πp index...")

    # S·ª≠ d·ª•ng OrderedDict ƒë·ªÉ lo·∫°i b·ªè c√°c ƒë∆∞·ªùng d·∫´n tr√πng l·∫∑p, gi·ªØ l·∫°i l·∫ßn xu·∫•t hi·ªán ƒë·∫ßu ti√™n
    unique_paths = list(OrderedDict.fromkeys(image_paths))
    unique_labels = [labels[image_paths.index(path)] for path in unique_paths if path in image_paths]

    valid_labels = []
    valid_paths = []
    valid_vectors = []

    # Ki·ªÉm tra t·ª´ng ·∫£nh
    for label, path in zip(unique_labels, unique_paths):
        if os.path.exists(path):
            try:
                # M·ªü v√† x·ª≠ l√Ω ·∫£nh
                image = preprocess(Image.open(path)).unsqueeze(0).to(device)
                with torch.no_grad():
                    vector = model.encode_image(image).cpu().numpy()
                valid_labels.append(label)
                valid_paths.append(path)
                valid_vectors.append(vector)
                print(f"‚úÖ ·∫¢nh h·ª£p l·ªá: {path}")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh {path}: {e}")
        else:
            print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i, b·ªè qua: {path}")

    # T·∫°o index m·ªõi
    index = faiss.IndexFlatL2(512)
    if valid_vectors:
        index.add(np.vstack(valid_vectors))
    else:
        print("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá ƒë·ªÉ th√™m v√†o index.")

    # C·∫≠p nh·∫≠t danh s√°ch to√†n c·ª•c
    labels = valid_labels
    image_paths = valid_paths
    save_index()
    print(f"‚úÖ D·ªçn d·∫πp xong. C√≤n l·∫°i {len(labels)} ·∫£nh.")

# Load index khi kh·ªüi ƒë·ªông
load_index()
clean_index()