# Fixx delete photo: ki·ªÉm tra h√¨nh ·∫£nh, kh√¥ng x√≥a h√¨nh ·∫£nh c·ªßa minh ch·ª©ng d√πng chung khi x√≥a minh ch·ª©ng
from datetime import datetime
import os
import shutil
from django.contrib import messages as dj_messages
from django import forms
from django.contrib import admin
from django.shortcuts import redirect, render
from django.db.models import Count

from CTDT.forms import AttestForm, CommonAttestForm
from CTDT.image_utils import remove_image_from_index
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.shared import Inches
from docx.oxml import parse_xml
from docx.oxml.ns import nsdecls
from docx.enum.section import WD_SECTION
from functools import lru_cache
# from CTDT.model_train.ml_model import predict_image, train_model


# from CTDT import forms

# Register your models here.
from .models import PhotoCommonAttest, Post, PhotoAttest
from .models import box
from .models import standard
from .models import criterion
from .models import attest
from .models import common_attest

from django_admin_listfilter_dropdown.filters import DropdownFilter, RelatedDropdownFilter, ChoiceDropdownFilter

from import_export.admin import ImportExportActionModelAdmin

from django.utils.html import format_html
from django.urls import reverse
from django.utils.http import urlencode

from django.http import HttpResponse
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement

from collections import defaultdict

from django.utils.html import format_html

from django.urls import path

from django.conf import settings
from django.contrib.auth import get_user_model
from .notifications import EmailNotification
from .admin_convert.action_convert import ActionConvert
from django.contrib.admin.widgets import AdminTextInputWidget 

from django.utils.text import slugify
from django.template.loader import get_template
from django.utils.translation import gettext as _

from easy_thumbnails.files import get_thumbnailer
from django.db import transaction


from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import ProfileUser

from .image_utils import search_similar_images
from django.core.exceptions import ValidationError

from guardian.admin import GuardedModelAdmin
from guardian.shortcuts import get_objects_for_user, remove_perm


# from django.utils.decorators import method_decorator
# from django.contrib.admin.views.decorators import staff_member_required

# admin.site.register(Post)

User = get_user_model()

class SendMailInline(admin.StackedInline):
    model = ProfileUser
    sendMailUser = False
    

# Define a new User admin
class UserAdmin(BaseUserAdmin):
    inlines = (SendMailInline, )

# Re-register UserAdmin
admin.site.unregister(User)
admin.site.register(User, UserAdmin)


@admin.action(description="Mark selected stories as published")
def make_published(modeladmin, request, queryset):
    queryset.update(status="p")

# h·ªôp
# admin.site.register(box)
@admin.register(box)
class boxAdmin(admin.ModelAdmin): 
    search_fields = ('title',)
    # prepopulated_fields = {'slug': ['title']}

    class Media:
        js = (['../static/js/custom_admin.js', 'https://cdnjs.cloudflare.com/ajax/libs/speakingurl/14.0.1/speakingurl.min.js'])  # ƒê∆∞·ªùng d·∫´n file JS

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)  # üîπ ƒê·∫£m b·∫£o obj ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi l·∫•y pk
        if change :
            action_type = "C·∫≠p nh·∫≠t h·ªôp"
        else :
            action_type = "Th√™m m·ªõi h·ªôp"
        admin_url = request.build_absolute_uri(reverse('admin:CTDT_box_change', args=[obj.pk]))
        
        # EmailNotification.send_box_email(request, [obj], action_type, admin_url)

    def delete_model(self, request, obj):
        # EmailNotification.send_box_email(request, [obj], "X√≥a h·ªôp", "Delete")
        super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        # EmailNotification.send_box_email(request, queryset, "X√≥a h·ªôp", "Delete")
        super().delete_queryset(request, queryset)
        
# ti√™u chu·∫©n
# admin.site.register(standard)
@admin.register(standard)
class standardAdmin(admin.ModelAdmin):
    list_display = ('title','view_criterion_link',) 
    search_fields = ('title',)
    ordering = ('title',)
    # prepopulated_fields = {'slug': ['title']}
    
    class Media:
        js = (['../static/js/custom_admin.js', 'https://cdnjs.cloudflare.com/ajax/libs/speakingurl/14.0.1/speakingurl.min.js'])  # ƒê∆∞·ªùng d·∫´n file JS
        
    
    def view_criterion_link(self, obj):
        count = obj.criterion_set.count()
        url = (
            reverse("admin:CTDT_criterion_changelist")#t√™n Project_model_linkChange
            + "?"
            + urlencode({"standard__id": f"{obj.id}"})
        )
        return format_html('<a href="{}">{} Ti√™u ch√≠</a>', url, count)
    
    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)  # üîπ ƒê·∫£m b·∫£o obj ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi l·∫•y pk
        if change :
            action_type = "C·∫≠p nh·∫≠t ti√™u chu·∫©n"
            obj.slug = slugify(obj.title)  # C·∫≠p nh·∫≠t l·∫°i slug t·ª´ title
        else :
            action_type = "Th√™m m·ªõi ti√™u chu·∫©n"
        admin_url = request.build_absolute_uri(reverse('admin:CTDT_standard_change', args=[obj.pk]))
        super().save_model(request, obj, form, change)
        # EmailNotification.send_standard_email(request, [obj], action_type, admin_url)

    def delete_model(self, request, obj):
        # EmailNotification.send_standard_email(request, [obj], "X√≥a ti√™u chu·∫©n", "Delete")
        super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        # EmailNotification.send_standard_email(request, queryset, "X√≥a ti√™u chu·∫©n", "Delete")
        super().delete_queryset(request, queryset)

    view_criterion_link.short_description = "Ti√™u ch√≠"
    
    
# ti√™u ch√≠
#admin.site.register(criterion)
@admin.register(criterion)
# class criterionAdmin(admin.ModelAdmin):   
class criterionAdmin(GuardedModelAdmin):   
    list_display = ('standard_name','title', 'view_attests_link',)
    list_display_links = ('title',)
    ordering = ('standard','title',)
    list_filter = (
        #'standard',
        # for ordinary fields
        #('standard', DropdownFilter),
        # for choice fields
        #('standard', ChoiceDropdownFilter),
        # for related fields
        ('standard', RelatedDropdownFilter),
    )
    
    class Media:
        js = (['https://code.jquery.com/jquery-3.6.0.min.js','../static/js/custom_admin.js', 'https://cdnjs.cloudflare.com/ajax/libs/speakingurl/14.0.1/speakingurl.min.js'])  # ƒê∆∞·ªùng d·∫´n file JS
        
    search_fields = ('title',)
    prepopulated_fields = {'slug': ['title']}
    
    @admin.display(description="Ti√™u chu·∫©n")
    def standard_name(self, obj):
        if self.model.objects.filter(standard_id=obj.standard, pk__lt=obj.pk).exists():
            return ""
        return f"{obj.standard}".upper()
    
    def view_attests_link(self, obj):
        count = obj.attest_set.count()
        url = (
            reverse("admin:CTDT_attest_changelist")#t√™n Project_model_linkChange
            + "?"
            + urlencode({"criterion__id": f"{obj.id}"})
        )
        return format_html('<a href="{}">{}</a>', url, count)
    
    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)  # üîπ ƒê·∫£m b·∫£o obj ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi l·∫•y pk
        if change :
            action_type = "C·∫≠p nh·∫≠t ti√™u ch√≠"
        else :
            action_type = "Th√™m m·ªõi ti√™u ch√≠"
        admin_url = request.build_absolute_uri(reverse('admin:CTDT_criterion_change', args=[obj.pk]))
        # EmailNotification.send_criterion_email(request, [obj], action_type, admin_url)

    def delete_model(self, request, obj):
        # EmailNotification.send_criterion_email(request, [obj], "X√≥a ti√™u ch√≠", "Delete")
        super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        # EmailNotification.send_criterion_email(request, queryset, "X√≥a ti√™u ch√≠", "Delete")
        super().delete_queryset(request, queryset)

    view_attests_link.short_description = "Minh ch·ª©ng"
    
    # ===================ph√¢n quy·ªÅn===============================
    def has_module_permission(self, request):
        if super().has_module_permission(request):
            return True
        return self.get_model_objects(request).exists()
    
    # def get_queryset(self, request):
    #     if request.user.is_superuser:
    #         return super().get_queryset(request)
    #     data = self.get_model_objects(request)
    #     return data
    
    def get_queryset(self, request):
        print(f"Getting queryset for user: {request.user}, is_superuser: {request.user.is_superuser}")
        if request.user.is_superuser:
            qs = super().get_queryset(request)
            print(f"Superuser queryset: {qs.count()} objects")
            return qs
        data = self.get_model_objects(request)
        print(f"Filtered queryset: {data.count()} objects")
        return data
    
    def get_model_objects(self, request, action=None, klass=None):
        opts = self.opts
        actions = [action] if action else ['view', 'change', 'delete']
        klass = klass if klass else opts.model
        model_name = klass._meta.model_name
        
        return get_objects_for_user(user=request.user, perms=[f'{perm}_{model_name}' for perm in actions], 
                                    klass=klass, any_perm=True, accept_global_perms=False)
    
    def has_permission(self, request, obj, action):
        opts = self.opts
        code_name = f'{action}_{opts.model_name}'
        if obj:
            return request.user.has_perm(f'{opts.app_label}.{code_name}', obj)
        else:
            return True
            # return self.get_model_objects(request).exists()
        
    def has_view_permission(self, request, obj = None):
        return self.has_permission(request, obj, 'view')
        # return True
    
    def has_change_permission(self, request, obj = None):
        # result = self.has_permission(request, obj, 'change')
        return self.has_permission(request, obj, 'change')
        # print(request.user.is_authenticated)
        # print(get_objects_for_user(request.user, 'CTDT.change_criterion'))
        # print(f"User: {request.user}, Obj: {obj}, Permission: {result}")
        # return result
        # return True
    
    def has_delete_permission(self, request, obj = None):
        return self.has_permission(request, obj, 'delete')
        # return True
# admin.site.register(criterion, criterionAdmin)
class PhotoAttestInline(admin.TabularInline):
    model = PhotoAttest
    fields = ("showphoto_thumbnail",)
    readonly_fields = ("showphoto_thumbnail",)
    max_num = 0

    def showphoto_thumbnail(self, instance):
        """A (pseudo)field that returns an image thumbnail for a show photo."""
        tpl = get_template("admin/templates/show_thumbnail.html")
        return tpl.render({"photo": instance.photo})
    
    def clean_photo(self, instance):
        if instance.photo:
            # instance.clean()  # G·ªçi ph∆∞∆°ng th·ª©c clean c·ªßa model ƒë·ªÉ ki·ªÉm tra ·∫£nh tr√πng l·∫∑p
            similar_images = search_similar_images(self.photo.path)
            if similar_images:
                raise ValidationError(f"H√¨nh ·∫£nh n√†y c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: {', '.join([img[0] for img in similar_images])}")

    showphoto_thumbnail.short_description = _("Thumbnail")

class PhotoCommonAttestInline(admin.TabularInline):
    model = PhotoCommonAttest
    fields = ("showphoto_thumbnail",)
    readonly_fields = ("showphoto_thumbnail",)
    max_num = 0

    def showphoto_thumbnail(self, instance):
        """A (pseudo)field that returns an image thumbnail for a show photo."""
        tpl = get_template("admin/templates/show_thumbnail.html")
        return tpl.render({"photo": instance.photo})

    def clean_photo(self, instance):
        if instance.photo:
            # instance.clean()  # G·ªçi ph∆∞∆°ng th·ª©c clean c·ªßa model ƒë·ªÉ ki·ªÉm tra ·∫£nh tr√πng l·∫∑p
            similar_images = search_similar_images(self.photo.path)
            if similar_images:
                raise ValidationError(f"H√¨nh ·∫£nh n√†y c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: {', '.join([img[0] for img in similar_images])}")
    
    showphoto_thumbnail.short_description = _("Thumbnail")

#admin.site.register(attest)
@admin.register(attest)
class attestAdmin(admin.ModelAdmin):
# class attestAdmin(ImportExportActionModelAdmin, admin.ModelAdmin):
    
    change_list_template = "admin/CTDT/attest/change_list.html"
    
    form = AttestForm
    inlines = [PhotoAttestInline]

    def save_related(self, request, form, formsets, change):
        super().save_related(request, form, formsets, change)
        form.save_photos(form.instance)
    # exclude = {'is_common',}
    list_display = ('criterion_name', 'attest_id_name','attest_stt', 'title', 'body', 'performer', "is_common")
    list_display_links = ('title',)
    list_filter = (
        #'criterion',
        # for ordinary fields
        #('criterion', DropdownFilter),
        # for choice fields
        #('criterion', ChoiceDropdownFilter),
        # for related fields
        ('criterion', RelatedDropdownFilter),
    )
    
    ordering = ('criterion_id', 'attest_id', 'attest_stt')
    search_fields = ('title', 'performer')
    # prepopulated_fields = {'slug': ['attest_id','attest_stt']}
    
    # def get_readonly_fields(self, request, obj=None):
    #     if obj:  # Trang ch·ªânh s·ª≠a (change)
    #         return self.readonly_fields + ('attest_id',)
    #     return self.readonly_fields
    
    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        if obj:
            if obj.common_attest is not None:  # N·∫øu l√† minh ch·ª©ng d√πng chung
                for field_name in form.base_fields:
                    form.base_fields[field_name].disabled = True  # V√¥ hi·ªáu h√≥a tr∆∞·ªùng
            else:
                form.base_fields['common_attest'].disabled = True
                form.base_fields['is_common'].disabled = True
                if 'photos' in form.base_fields:
                    form.base_fields['photos'].disabled = False
        class FormWithRequest(form):
            def __init__(self2, *args, **inner_kwargs):
                inner_kwargs['request'] = request
                super().__init__(*args, **inner_kwargs)
        return FormWithRequest
    
    def render_change_form(self, request, context, add=False, change=False, form_url="", obj=None):
        if obj and obj.common_attest is not None:  # N·∫øu l√† minh ch·ª©ng d√πng chung
            context['show_save'] = False  # ·∫®n n√∫t l∆∞u
            context['show_save_and_continue'] = False
            context['show_save_and_add_another'] = False
        else:
            context['show_save'] = True
            context['show_save_and_continue'] = True
            context['show_save_and_add_another'] = True
        return super().render_change_form(request, context, add, change, form_url, obj)
    

    def save_model(self, request, obj, form, change):
        
        super().save_model(request, obj, form, change)  # üîπ ƒê·∫£m b·∫£o obj ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi l·∫•y pk
        if change :
            action_type = "C·∫≠p nh·∫≠t minh ch·ª©ng"
        else :
            action_type = "Th√™m m·ªõi minh ch·ª©ng"
        admin_url = request.build_absolute_uri(reverse('admin:CTDT_attest_change', args=[obj.pk]))
        
        
        if not change and obj.common_attest : 
            # obj.is_common = bool(obj.common_attest)  # G√°n True n·∫øu common_attest c√≥ gi√° tr·ªã
            common_attest_data = obj.common_attest
            obj.attest_id = common_attest_data.common_attest_id
            obj.attest_stt = common_attest_data.common_attest_stt
            obj.title = common_attest_data.title
            obj.body = common_attest_data.body
            obj.performer = common_attest_data.performer
            obj.note = "DC"
            obj.slug = common_attest_data.slug
            # obj.image = common_attest_data.image
            # obj.criterion = common_attest_data.criterion
            obj.box = common_attest_data.box
            obj.is_common = True
            
        else:
            obj.is_common = False
        
        
        user = request.user
        send_mail_obj, created = ProfileUser.objects.get_or_create(user=user)
        if send_mail_obj.SendMailUser:
            dj_messages.success(request, f"‚úÖ Check send mail user {send_mail_obj.SendMailUser}")
        # # EmailNotification.send_attest_email(request, [obj], action_type, admin_url)
        # EmailNotification.send_attest_email(request, [obj], action_type)
        transaction.on_commit(lambda: 
            EmailNotification.send_attest_email(request, [obj], action_type)
        )
        super().save_model(request, obj, form, change)
        
        # X·ª≠ l√Ω c√°c PhotoAttest instances
        if 'photoattest_set' in form.cleaned_data:  # Ki·ªÉm tra xem c√≥ PhotoAttest instances trong form kh√¥ng
            for photo in form.cleaned_data['photoattest_set']:
                try:
                    self.inlines[0].clean_photo(photo)  # G·ªçi h√†m clean_photo n·∫øu c·∫ßn
                except forms.ValidationError as e:
                    raise forms.ValidationError(e)  # N√©m l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ
                photo.save()  # L∆∞u PhotoAttest instance
    
    def delete_model(self, request, obj):
        """ G·ª≠i email khi x√≥a """
        
        user = request.user
        send_mail_obj, created = ProfileUser.objects.get_or_create(user=user)
        if send_mail_obj.SendMailUser:
            dj_messages.success(request, f"‚úÖ Check send mail user {send_mail_obj.SendMailUser}")
        
        # # EmailNotification.send_attest_email(request, [obj], "X√≥a minh ch·ª©ng", "Delete")
        EmailNotification.send_attest_email(request, [obj], "X√≥a minh ch·ª©ng")
        
        super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        """ G·ª≠i email ch·ª©a danh s√°ch attest b·ªã x√≥a tr∆∞·ªõc khi x√≥a """
        # delete photo
        for attest in queryset:
            for photo_attest in attest.photos.all():  # L·∫•y ·∫£nh li√™n k·∫øt
                if photo_attest.photo and not common_attest:
                    
                    # # Ki·ªÉm tra xem ·∫£nh c√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi c√°c attest kh√°c hay kh√¥ng
                    # photo_usage_count = photo_attest.photo.attestphoto_set.aggregate(Count('id'))['id__count']
                    
                    # # Ch·ªâ x√≥a ·∫£nh n·∫øu ·∫£nh kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi attest n√†o kh√°c
                    # if photo_usage_count <= 1:
                    try:
                        thumbnail_path = get_thumbnailer(photo_attest.photo)['small'].path
                        if os.path.isfile(thumbnail_path):
                            os.remove(thumbnail_path)
                    except Exception:
                        pass  # B·ªè qua n·∫øu kh√¥ng c√≥ thumbnail

                    if os.path.isfile(photo_attest.photo.path):
                        os.remove(photo_attest.photo.path)
                    folder = os.path.dirname(photo_attest.photo.path)
                    # x√≥a index
                    remove_image_from_index(photo_attest.photo.path)
                    # Ki·ªÉm tra v√† x√≥a folder n·∫øu r·ªóng (lo·∫°i b·ªè file ·∫©n n·∫øu c·∫ßn)
                    remaining_files = [f for f in os.listdir(folder) if not f.startswith('.')]
                    if not remaining_files:
                        shutil.rmtree(folder)
        
        user = request.user
        send_mail_obj, created = ProfileUser.objects.get_or_create(user=user)
        if send_mail_obj.SendMailUser:
            dj_messages.success(request, f"‚úÖ Check send mail user {send_mail_obj.SendMailUser}")
        
        # EmailNotification.send_attest_email(request, queryset, "X√≥a minh ch·ª©ng", "Delete")
        EmailNotification.send_attest_email(request, queryset, "X√≥a minh ch·ª©ng")
        
        # G·ªçi ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh ƒë·ªÉ x√≥a c√°c attest
        super().delete_queryset(request, queryset)
    
    class Media:
        js = ('../static/js/custom_admin.js', 'https://cdnjs.cloudflare.com/ajax/libs/speakingurl/14.0.1/speakingurl.min.js')  # ƒê∆∞·ªùng d·∫´n file JS
        css = {
            'all': ('../static/css/custom_admin.css',)
        }
        

    # @admin.display(description="Ti√™u ch√≠")
    # def criterion_name(self, obj):
    #     if self.model.objects.filter(criterion=obj.criterion, pk__lt=obj.pk).exists():
    #         return ""
    #     # return f"{obj.criterion} {obj.title}".upper()
    #     return f"{obj.criterion}"
    # @admin.display(description="M√£ minh ch·ª©ng")
    # def attest_id_name(self, obj):
    #     if self.model.objects.filter(attest_id=obj.attest_id, pk__lt=obj.pk).exists():
    #         return ""
    #     return f"{obj.attest_id}".upper()
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        self._displayed_criteria_attest = set()  # Store seen criterion_ids
        return qs.order_by('criterion__standard', 'criterion', 'attest_id')

    @admin.display(description="Ti√™u ch√≠")
    def criterion_name(self, obj):
        key = obj.criterion_id
        if key in self._displayed_criteria_attest:
            return ""
        self._displayed_criteria_attest.add(key)
        return str(obj.criterion)

    @admin.display(description="M√£ minh ch·ª©ng")
    def attest_id_name(self, obj):
        if self.model.objects.filter(
            attest_id=obj.attest_id,
            criterion=obj.criterion,
            pk__lt=obj.pk
        ).exists():
            return ""
        return obj.attest_id.upper()
    
    
    
    #  # Th√™m ƒë∆∞·ªùng d·∫´n cho action nh·∫≠p file Word
    # def get_urls(self):
    #     urls = super().get_urls()
    #     custom_urls = [
    #         path('import-word/', self.import_word, name='import_word'),
    #     ]
    #     return custom_urls + urls
    
    # # Giao di·ªán t·∫£i file Word
    # def import_word(self, request):
    #     from django.template.response import TemplateResponse
    #     from django.core.files.uploadedfile import UploadedFile

    #     if request.method == "POST" and request.FILES.get('word_file'):
    #         word_file = request.FILES['word_file']
    #         if isinstance(word_file, UploadedFile):
    #             self.handle_uploaded_word(word_file)
    #             self.message_user(request, "File Word ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.")
    #             return HttpResponse(".")
    #     return TemplateResponse(request, "admin/import_word.html", context={})
    
    
    actions = ['export_to_word']
    # def export_to_word(self, request, queryset):

    #     # T·∫°o file Word m·ªõi
    #     document = Document()

    #     # Th√™m ti√™u ƒë·ªÅ ch√≠nh
    #     title = document.add_paragraph("DANH M·ª§C MINH CH·ª®NG")
    #     title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    #     title.runs[0].font.size = Pt(14)
    #     title.runs[0].bold = True

    #     # T·∫°o b·∫£ng v·ªõi 5 c·ªôt
    #     table = document.add_table(rows=1, cols=5)
    #     table.style = 'Table Grid'

    #     # ƒê·ªãnh nghƒ©a header
    #     hdr_cells = table.rows[0].cells
    #     hdr_cells[0].text = 'Ti√™u ch√≠'
    #     hdr_cells[1].text = 'STT (trong ti√™u ch√≠)'
    #     hdr_cells[2].text = 'M√£ minh ch·ª©ng'
    #     hdr_cells[3].text = 'T√™n minh ch·ª©ng'
    #     hdr_cells[4].text = 'N∆°i ban h√†nh...'

    #     # Bi·∫øn theo d√µi ti√™u chu·∫©n v√† ti√™u ch√≠ hi·ªán t·∫°i
    #     current_standard = None
    #     current_criterion = None
    #     current_attest_id = None
    #     merge_criterion_cell = None
    #     merge_attest_cell = None
    #     merge_stt_cell = None
    #     stt_within_criterion = 0

    #     # S·∫Øp x·∫øp d·ªØ li·ªáu theo ti√™u chu·∫©n v√† ti√™u ch√≠
    #     sorted_queryset = queryset.order_by('criterion__standard', 'criterion', 'attest_id')

    #     for obj in sorted_queryset:
    #         # Ki·ªÉm tra ti√™u chu·∫©n (standard)
    #         if obj.criterion.standard != current_standard:
    #             # N·∫øu ti√™u chu·∫©n thay ƒë·ªïi, th√™m d√≤ng ti√™u chu·∫©n m·ªõi
    #             current_standard = obj.criterion.standard
    #             row_cells = table.add_row().cells
    #             row_cells[0].merge(row_cells[4])  # G·ªôp t·∫•t c·∫£ c√°c c·ªôt
    #             row_cells[0].text = f"Ti√™u chu·∫©n: {current_standard.title}"
    #             row_cells[0].paragraphs[0].runs[0].bold = True

    #         # Ki·ªÉm tra ti√™u ch√≠ (criterion)
    #         if obj.criterion != current_criterion:
    #             # N·∫øu ti√™u ch√≠ thay ƒë·ªïi, g·ªôp √¥ ti√™u ch√≠ tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
    #             if merge_criterion_cell is not None:
    #                 merge_criterion_cell.merge(row_cells[0])
    #             current_criterion = obj.criterion
    #             merge_criterion_cell = None
    #             stt_within_criterion = 0  # ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm STT

    #         # Ki·ªÉm tra m√£ minh ch·ª©ng (attest_id)
    #         if obj.attest_id != current_attest_id:
    #             # N·∫øu m√£ minh ch·ª©ng thay ƒë·ªïi, g·ªôp √¥ minh ch·ª©ng tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
    #             if merge_attest_cell is not None:
    #                 merge_attest_cell.merge(row_cells[2])
    #             if merge_stt_cell is not None:
    #                 merge_stt_cell.merge(row_cells[1])
    #             current_attest_id = obj.attest_id
    #             merge_attest_cell = None
    #             merge_stt_cell = None
    #             stt_within_criterion += 1

    #         # Th√™m d√≤ng chi ti·∫øt
    #         row_cells = table.add_row().cells

    #         # G√°n gi√° tr·ªã cho c·ªôt "Ti√™u ch√≠"
    #         if current_criterion == obj.criterion and merge_criterion_cell is None:
    #             merge_criterion_cell = row_cells[0]
    #             row_cells[0].text = str(obj.criterion)
    #         else:
    #             row_cells[0].text = ''

    #         # G√°n gi√° tr·ªã cho c·ªôt "STT trong ti√™u ch√≠"
    #         if current_attest_id == obj.attest_id and merge_stt_cell is None:
    #             merge_stt_cell = row_cells[1]
    #             row_cells[1].text = str(stt_within_criterion)
    #         else:
    #             row_cells[1].text = ''

    #         # G√°n gi√° tr·ªã cho c·ªôt "M√£ minh ch·ª©ng"
    #         if current_attest_id == obj.attest_id and merge_attest_cell is None:
    #             merge_attest_cell = row_cells[2]
    #             row_cells[2].text = obj.attest_id
    #         else:
    #             row_cells[2].text = ''

    #         # G√°n gi√° tr·ªã cho c√°c c·ªôt kh√°c
    #         row_cells[3].text = obj.title  # T√™n minh ch·ª©ng
    #         row_cells[4].text = obj.performer  # N∆°i ban h√†nh

    #     # G·ªôp √¥ cu·ªëi c√πng n·∫øu c√≤n d∆∞
    #     if merge_criterion_cell is not None:
    #         merge_criterion_cell.merge(row_cells[0])
    #     if merge_attest_cell is not None:
    #         merge_attest_cell.merge(row_cells[2])
    #     if merge_stt_cell is not None:
    #         merge_stt_cell.merge(row_cells[1])

    #     # L∆∞u t√†i li·ªáu v√†o HTTP response
    #     response = HttpResponse(
    #         content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    #     )
    #     response['Content-Disposition'] = 'attachment; filename="DanhMucMinhChung.docx"'
    #     document.save(response)
    #     return response
    
    def export_to_word(self, request, queryset):
        document = Document()
        
        # === ƒê√≥ng khung section 0 ===
        section0 = document.sections[0]
        
        section0.left_margin = Inches(0.7)
        section0.right_margin = Inches(0.7)
        pgBorders = OxmlElement('w:pgBorders')
        for border_name in ['top', 'left', 'bottom', 'right']:
            border = OxmlElement(f'w:{border_name}')
            border.set(qn('w:val'), 'single')
            border.set(qn('w:sz'), '12')
            border.set(qn('w:space'), '4')
            border.set(qn('w:color'), 'auto')
            pgBorders.append(border)
        section0._sectPr.append(pgBorders)
        
        # import word
        today = datetime.today()
        current_month = today.strftime("%m")
        current_year = today.strftime("%Y")
        
        document.add_paragraph("\n")
        p = document.add_paragraph("B·ªò T√ÄI NGUY√äN V√Ä M√îI TR∆Ø·ªúNG")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.runs[0].font.size = Pt(16)

        p = document.add_paragraph("TR∆Ø·ªúNG ƒê·∫†I H·ªåC T√ÄI NGUY√äN V√Ä M√îI TR∆Ø·ªúNG TP. HCM")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        run.font.size = Pt(15)
        run.bold = True
        
        #k·∫ª ƒë∆∞·ªùng v·ªõi b·∫£ng
        table = document.add_table(rows=1, cols=1)
        table.alignment = WD_ALIGN_PARAGRAPH.CENTER
        cell = table.cell(0, 0)
        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

        cell.width = Inches(5.0)  # ƒê·ªô d√†i 

        # Th√™m ƒë∆∞·ªùng k·∫ª d∆∞·ªõi √¥ b·∫£ng
        cell_border = OxmlElement('w:pBdr')
        bottom_border = OxmlElement('w:top')
        bottom_border.set(qn('w:val'), 'single')
        bottom_border.set(qn('w:sz'), '12')
        bottom_border.set(qn('w:space'), '6')
        bottom_border.set(qn('w:color'), 'auto')
        cell_border.append(bottom_border)
        cell.paragraphs[0]._element.get_or_add_pPr().append(cell_border)

        # ===== CH√àN LOGO =====
        document.add_paragraph("\n")
        document.add_picture('media/' + 'logo.png', width=Inches(2.0))
        last_paragraph = document.paragraphs[-1]
        last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # ===== TI√äU ƒê·ªÄ =====
        p = document.add_paragraph("\nDANH M·ª§C MINH CH·ª®NG T·ª∞ ƒê√ÅNH GI√Å")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        run.bold = True
        run.font.size = Pt(20)

        # ===== CH∆Ø∆†NG TR√åNH =====
        p = document.add_paragraph("CH∆Ø∆†NG TR√åNH ƒê√ÄO T·∫†O TR√åNH ƒê·ªò")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        run.bold = True
        run.font.size = Pt(15.5)

        p = document.add_paragraph("ƒê·∫†I H·ªåC NG√ÄNH C√îNG NGH·ªÜ TH√îNG TIN")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        run.bold = True
        run.font.size = Pt(15.5)

        # ===== TI√äU CHU·∫®N =====
        p = document.add_paragraph("\nTheo ti√™u chu·∫©n ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        p.runs[0].font.size = Pt(15.5)

        p = document.add_paragraph("c·ªßa B·ªô Gi√°o d·ª•c v√† ƒê√†o t·∫°o")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        p.runs[0].font.size = Pt(15.5)

        for _ in range(3):
            document.add_paragraph()
        # ===== TH·ªúI GIAN ƒê·ªäA ƒêI·ªÇM =====
        p = document.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        run = p.add_run(f"TP H·ªì Ch√≠ Minh, th√°ng {int(current_month)} nƒÉm {current_year}")
        run.italic = True
        run.font.size = Pt(14)

        document.add_page_break()
        # end import word
        
        # Ch√®n section m·ªõi (Section 1) b·∫Øt ƒë·∫ßu t·ª´ trang ti·∫øp theo
        document.add_section(WD_SECTION.NEW_PAGE)
        section1 = document.sections[1]
        pgBorders1 = OxmlElement('w:pgBorders')
        for border_name in ['top', 'left', 'bottom', 'right']:
            border = OxmlElement(f'w:{border_name}')
            border.set(qn('w:val'), 'none')  # T·∫Øt vi·ªÅn b·∫±ng 'none'
            pgBorders1.append(border)
        section1._sectPr.append(pgBorders1)
        # Ng·∫Øt li√™n k·∫øt header/footer v·ªõi section tr∆∞·ªõc
        section1.header.is_linked_to_previous = False
        section1.footer.is_linked_to_previous = False
        # ===== TRANG B√åA L√ìT =====
        document.add_paragraph("\n")
        p = document.add_paragraph("B·ªò T√ÄI NGUY√äN V√Ä M√îI TR∆Ø·ªúNG")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.runs[0].font.size = Pt(16)

        p = document.add_paragraph("TR∆Ø·ªúNG ƒê·∫†I H·ªåC T√ÄI NGUY√äN V√Ä M√îI TR∆Ø·ªúNG TP. HCM")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        run.font.size = Pt(15)
        run.bold = True
        rPr = run._element.get_or_add_rPr()
        
        #k·∫ª ƒë∆∞·ªùng v·ªõi b·∫£ng
        table = document.add_table(rows=1, cols=1)
        table.alignment = WD_ALIGN_PARAGRAPH.CENTER
        cell = table.cell(0, 0)
        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

        cell.width = Inches(5.0)  # ƒê·ªô d√†i 

        # Th√™m ƒë∆∞·ªùng k·∫ª d∆∞·ªõi √¥ b·∫£ng
        cell_border = OxmlElement('w:pBdr')
        bottom_border = OxmlElement('w:top')
        bottom_border.set(qn('w:val'), 'single')
        bottom_border.set(qn('w:sz'), '12')
        bottom_border.set(qn('w:space'), '6')
        bottom_border.set(qn('w:color'), 'auto')
        cell_border.append(bottom_border)
        cell.paragraphs[0]._element.get_or_add_pPr().append(cell_border)

        # Logo
        document.add_paragraph("\n")
        document.add_picture('media/logo.png', width=Inches(2.0))
        document.paragraphs[-1].alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Ti√™u ƒë·ªÅ ch√≠nh
        p = document.add_paragraph("\nDANH M·ª§C MINH CH·ª®NG")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.runs[0]
        run.bold = True
        run.font.size = Pt(20)

        # Ghi ch√∫ d∆∞·ªõi ti√™u ƒë·ªÅ
        p = document.add_paragraph("(K√®m theo B√°o c√°o t·ª± ƒë√°nh gi√° Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o Ng√†nh C√¥ng ngh·ªá th√¥ng tin)")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.runs[0].italic = True
        run = p.runs[0]
        run.font.size = Pt(14)

        # Khung ghi ch√∫
        table = document.add_table(rows=1, cols=1)
        table.autofit = True
        cell = table.cell(0, 0)
        # Thi·∫øt l·∫≠p n·ªÅn cho √¥ (HEX #4F81BD)
        shading_elm = parse_xml(r'<w:shd {} w:fill="4F81BD"/>'.format(nsdecls('w')))
        cell._tc.get_or_add_tcPr().append(shading_elm)

        # para = cell.paragraphs[0]
        # para.alignment = WD_ALIGN_PARAGRAPH.LEFT
        # run = para.add_run("L∆∞u √Ω:\n")
        # run.bold = True
        # run.italic = True

        # Ghi n·ªôi dung
        paragraph = cell.paragraphs[0]
        run = paragraph.add_run(
            "L∆∞u √Ω:\n"
            "- T√†i li·ªáu n√†y l√† t√†i s·∫£n ri√™ng c·ªßa Khoa HTTT&VT ƒë∆∞·ª£c d√πng ƒë·ªÉ l√†m b√°o c√°o t·ª± ƒë√°nh gi√° ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o.\n"
            "- T√†i li·ªáu n√†y kh√¥ng ƒë∆∞·ª£c chia s·∫ª cho b·∫•t k·ª≥ c√° nh√¢n ho·∫∑c t·ªï ch·ª©c n√†o n·∫øu kh√¥ng ƒë∆∞·ª£c s·ª± ƒë·ªìng √Ω c·ªßa Khoa HTTT&VT.\n"
            "- Kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán c√°c h√†nh vi sao ch·ª•p, ph√°t t√°n t√†i li·ªáu d∆∞·ªõi m·ªçi h√¨nh th·ª©c.\n"
            "- Nh·ªØng c√° nh√¢n kh√¥ng li√™n quan ƒë·ªÅ ngh·ªã kh√¥ng ƒë·ªçc t√†i li·ªáu n√†y."
        )
        run.font.size = Pt(14)
        run.font.name = 'Times New Roman'
        run.font.color.rgb = RGBColor(255, 255, 255)  # M√†u ch·ªØ tr·∫Øng

        # ƒê·ªãa ƒëi·ªÉm v√† th·ªùi gian
        for _ in range(2):
            document.add_paragraph()
        p = document.add_paragraph()
        p = document.add_paragraph(f"TP, H·ªì Ch√≠ Minh, th√°ng {int(current_month)}  nƒÉm {current_year}")
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.runs[0].italic = True
        run = p.runs[0]
        run.font.size = Pt(14)
        
        # ƒê·∫∑t ƒëo·∫°n vƒÉn cu·ªëi c√πng xu·ªëng cu·ªëi trang
        p.paragraph_format.space_after = Pt(0)  # Lo·∫°i b·ªè kho·∫£ng c√°ch sau ƒëo·∫°n
        p.paragraph_format.page_break_before = False  # ƒê·∫£m b·∫£o kh√¥ng ng·∫Øt trang tr∆∞·ªõc ƒëo·∫°n

        document.add_page_break()

        document.add_section(WD_SECTION.NEW_PAGE)
        new_section = document.sections[2]
        # Ng·∫Øt li√™n k·∫øt header/footer v·ªõi section tr∆∞·ªõc
        new_section.header.is_linked_to_previous = False
        new_section.footer.is_linked_to_previous = False
        
        # === Header Section 1 ===
        header = new_section.header
        header_paragraph = header.paragraphs[0]
        header_paragraph.text = "Danh m·ª•c minh ch·ª©ng b√°o c√°o t·ª± ƒë√°nh gi√° CTƒêT ng√†nh C√¥ng ngh·ªá th√¥ng tin"
        header_paragraph.paragraph_format.left_indent = Inches(0)
        header_paragraph.runs[0].font.name = 'Times New Roman'
        header_paragraph.runs[0].font.size = Pt(13)
        header_paragraph.runs[0].font.italic = True  # In nghi√™ng
        
        # Th√™m ƒë∆∞·ªùng k·∫ª ph√¢n chia d∆∞·ªõi header
        header0_border = OxmlElement('w:pBdr')
        bottom_border = OxmlElement('w:bottom')
        bottom_border.set(qn('w:val'), 'single')
        bottom_border.set(qn('w:sz'), '12')
        bottom_border.set(qn('w:space'), '4')
        bottom_border.set(qn('w:color'), 'auto')
        header0_border.append(bottom_border)
        header_paragraph._element.get_or_add_pPr().append(header0_border)

        # === Footer Section 1 ===
        footer = new_section.footer
        footer_paragraph = footer.paragraphs[0]
        footer_paragraph.text = "Khoa C√¥ng ngh·ªá th√¥ng tin - HCMUNRE"
        footer_paragraph.paragraph_format.left_indent = Inches(0)
        footer_paragraph.runs[0].font.size = Pt(12)
        footer_paragraph.runs[0].font.italic = True  # In nghi√™ng
        # Th√™m ƒë∆∞·ªùng k·∫ª ph√¢n chia tr√™n footer
        footer0_border = OxmlElement('w:pBdr')
        top_border = OxmlElement('w:top')
        top_border.set(qn('w:val'), 'single')
        top_border.set(qn('w:sz'), '12')
        top_border.set(qn('w:space'), '4')
        top_border.set(qn('w:color'), 'auto')
        footer0_border.append(top_border)
        footer_paragraph._element.get_or_add_pPr().append(footer0_border)
        
        # ===== M·ª§C L·ª§C =====
        heading = document.add_paragraph("M·ª§C L·ª§C", style='Heading 1')
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = heading.runs[0]
        run.font.size = Pt(18)
        # TOC - Ch√®n d√≤ng th√¥ng b√°o thay v√¨ d√πng XML (ƒë·ªÉ tr√°nh l·ªói)
        toc_para = document.add_paragraph("M·ª•c l·ª•c s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y khi c·∫≠p nh·∫≠t th·ªß c√¥ng.")
        toc_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = toc_para.runs[0]
        run.font.size = Pt(14)
        document.add_page_break()
        
        # Th√™m ti√™u ƒë·ªÅ
        title = document.add_paragraph("DANH M·ª§C MINH CH·ª®NG")
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = title.runs[0]
        run.bold = True
        run.font.size = Pt(14)

        # # T·∫°o b·∫£ng
        # table = document.add_table(rows=1, cols=5)
        # table.style = 'Table Grid'

        # Header in ƒë·∫≠m STT trong ti√™u ch√≠
        headers = ['Ti√™u ch√≠', 'STT', 'M√£ minh ch·ª©ng', 'T√™n minh ch·ª©ng', 'S·ªë, ng√†y ban h√†nh, ho·∫∑c th·ªùi ƒëi·ªÉm kh·∫£o s√°t, ƒëi·ªÅu tra, ph·ªèng v·∫•n, quan s√°t,‚Ä¶', 'N∆°i ban h√†nh ho·∫∑c nh√≥m, c√° nh√¢n th·ª±c hi·ªán', 'Ghi ch√∫']
        
        # =========================================================================
        
        # T·∫°o b·∫£ng v·ªõi s·ªë c·ªôt t∆∞∆°ng ·ª©ng v·ªõi headers
        table = document.add_table(rows=1, cols=len(headers))
        table.style = 'Table Grid'
        
        
        # # CƒÉn ch·ªânh ƒë·ªô r·ªông c√°c c·ªôt (t√πy ch·ªânh theo nhu c·∫ßu)
        # table.autofit = False  # ƒê·ªÉ gi·ªØ ƒë·ªô r·ªông ƒëc set
        # column_widths = [Inches(0.2), Inches(0.2), Inches(0.2), Inches(0.5), Inches(0.5), Inches(1.2), Inches(0.2)]
        hdr_cells = table.rows[0].cells
        for i, header in enumerate(headers):
            # hdr_cells[i].width = column_widths[i]
            para = hdr_cells[i].paragraphs[0]
            run = para.add_run(header)
            run.bold = True

        current_standard = None
        current_criterion = None
        current_attest_id = None
        stt_within_criterion = 0

        criterion_cells = []
        attest_cells = []
        stt_cells = []

        sorted_queryset = queryset.order_by('criterion__standard', 'criterion_id', 'attest_id')


        # def merge_and_clear(cells):
        #     if len(cells) > 1:
        #         for cell in cells[1:]:
        #             for para in cell.paragraphs:
        #                 para.clear()  # X√≥a n·ªôi dung
        #         cells[0].merge(cells[-1])  # Merge to√†n b·ªô

        # for obj in sorted_queryset:
        #     if obj.criterion.standard != current_standard:
        #         current_standard = obj.criterion.standard
        #         std_row = table.add_row()
        #         std_cell = std_row.cells[0]
        #         std_cell.merge(std_row.cells[4])
        #         run = std_cell.paragraphs[0].add_run(f"{current_standard.title}")#ti√™u chu·∫©n
        #         run.bold = True

        #     if obj.criterion != current_criterion:
        #         merge_and_clear(criterion_cells)
        #         criterion_cells = []
        #         current_criterion = obj.criterion
        #         stt_within_criterion = 0

        #     if obj.attest_id != current_attest_id:
        #         merge_and_clear(attest_cells)
        #         merge_and_clear(stt_cells)
        #         attest_cells = []
        #         stt_cells = []
        #         current_attest_id = obj.attest_id
        #         stt_within_criterion += 1

        #     row = table.add_row()
        #     cells = row.cells

        #     # Ti√™u ch√≠
        #     cells[0].text = str(obj.criterion)
        #     criterion_cells.append(cells[0])
        #     if len(criterion_cells) == 1:
        #         run = cells[0].paragraphs[0].runs[0]
        #         run.bold = True

        #     # STT
        #     cells[1].text = str(stt_within_criterion)
        #     stt_cells.append(cells[1])

        #     # M√£ minh ch·ª©ng
        #     cells[2].text = obj.attest_id
        #     attest_cells.append(cells[2])

        #     # T√™n minh ch·ª©ng
        #     cells[3].text = obj.title or ''
            
        #     # S·ªë ng√†y ban h√†nh
        #     cells[4].text = obj.body or ''

        #     # N∆°i ban h√†nh
        #     cells[5].text = obj.performer or ''
            
        #     # Ghi ch√∫
        #     cells[6].text = obj.note or ''
        # # Merge l·∫ßn cu·ªëi
        # merge_and_clear(criterion_cells)
        # merge_and_clear(attest_cells)
        # merge_and_clear(stt_cells)

        def merge_and_clear(cells):
            if len(cells) > 1:
                for cell in cells[1:]:
                    for para in cell.paragraphs:
                        para.clear()
                cells[0].merge(cells[-1])

        for obj in sorted_queryset:
            # Khi g·∫∑p Ti√™u chu·∫©n m·ªõi
            if obj.criterion.standard != current_standard:
                # Merge c√°c ph·∫ßn tr∆∞·ªõc n·∫øu c√≥
                merge_and_clear(criterion_cells)
                merge_and_clear(attest_cells)
                merge_and_clear(stt_cells)
                criterion_cells, attest_cells, stt_cells = [], [], []

                current_standard = obj.criterion.standard
                std_row = table.add_row()
                std_cell = std_row.cells[0]
                std_cell.merge(std_row.cells[4])
                run = std_cell.paragraphs[0].add_run(f"{current_standard.title}")
                run.bold = True

                # Reset criterion & attest
                current_criterion = None
                current_attest_id = None

            # Khi g·∫∑p Ti√™u ch√≠ m·ªõi
            if obj.criterion != current_criterion:
                merge_and_clear(criterion_cells)
                criterion_cells = []
                current_criterion = obj.criterion
                stt_within_criterion = 0
                current_attest_id = None  # Reset ƒë·ªÉ ph√¢n nh√≥m minh ch·ª©ng m·ªõi

            # Khi g·∫∑p m√£ minh ch·ª©ng m·ªõi (trong c√πng ti√™u ch√≠)
            if obj.attest_id != current_attest_id:
                merge_and_clear(attest_cells)
                merge_and_clear(stt_cells)
                attest_cells = []
                stt_cells = []
                current_attest_id = obj.attest_id
                stt_within_criterion += 1

            # T·∫°o h√†ng m·ªõi
            row = table.add_row()
            cells = row.cells

            # C·ªôt Ti√™u ch√≠
            cells[0].text = str(obj.criterion)
            criterion_cells.append(cells[0])
            if len(criterion_cells) == 1:
                run = cells[0].paragraphs[0].runs[0]
                run.bold = True

            # C·ªôt STT
            cells[1].text = str(stt_within_criterion)
            stt_cells.append(cells[1])

            # C·ªôt M√£ minh ch·ª©ng
            cells[2].text = obj.attest_id
            attest_cells.append(cells[2])

            # C√°c c·ªôt c√≤n l·∫°i
            cells[3].text = obj.title or ''
            cells[4].text = obj.body or ''
            cells[5].text = obj.performer or ''
            cells[6].text = obj.note or ''

        # Merge cu·ªëi c√πng
        merge_and_clear(criterion_cells)
        merge_and_clear(attest_cells)
        merge_and_clear(stt_cells)

        # # T·∫°o b·∫£ng v·ªõi s·ªë c·ªôt t∆∞∆°ng ·ª©ng v·ªõi headers
        # headers = ['Ti√™u ch√≠', 'STT', 'M√£ minh ch·ª©ng', 'T√™n minh ch·ª©ng', 'S·ªë, ng√†y ban h√†nh, ho·∫∑c th·ªùi ƒëi·ªÉm kh·∫£o s√°t, ƒëi·ªÅu tra, ph·ªèng v·∫•n, quan s√°t,‚Ä¶', 'N∆°i ban h√†nh ho·∫∑c nh√≥m, c√° nh√¢n th·ª±c hi·ªán', 'Ghi ch√∫']
        # table = document.add_table(rows=1, cols=len(headers))
        # table.style = 'Table Grid'

        # # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ b·∫£ng
        # hdr_cells = table.rows[0].cells
        # for i, header in enumerate(headers):
        #     para = hdr_cells[i].paragraphs[0]
        #     run = para.add_run(header)
        #     run.bold = True

        # # Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ theo d√µi ti√™u chu·∫©n, ti√™u ch√≠, v√† m√£ minh ch·ª©ng hi·ªán t·∫°i
        # current_standard = None
        # current_criterion = None
        # current_attest_id = None
        # stt_within_criterion = 0

        # # S·∫Øp x·∫øp queryset
        # sorted_queryset = queryset.order_by('criterion__standard', 'criterion_id', 'attest_id')

        # def merge_and_clear(cells):
        #     if len(cells) > 1:
        #         for cell in cells[1:]:
        #             for para in cell.paragraphs:
        #                 para.clear()  # X√≥a n·ªôi dung
        #         cells[0].merge(cells[-1])  # Merge to√†n b·ªô
        
        # # Duy·ªát qua t·ª´ng ƒë·ªëi t∆∞·ª£ng trong queryset ƒë·ªÉ ƒëi·ªÅn d·ªØ li·ªáu v√†o b·∫£ng
        # for obj in sorted_queryset:
        #     # Th√™m h√†ng ti√™u chu·∫©n n·∫øu ti√™u chu·∫©n thay ƒë·ªïi
        #     if obj.criterion.standard != current_standard:
        #         current_standard = obj.criterion.standard
        #         std_row = table.add_row()
        #         std_cell = std_row.cells[0]
        #         # G·ªôp c√°c √¥ trong h√†ng ti√™u chu·∫©n
        #         std_cell.merge(std_row.cells[len(headers) - 1])
        #         run = std_cell.paragraphs[0].add_run(f"{current_standard.title}")
        #         run.bold = True

        #     # Ki·ªÉm tra n·∫øu ti√™u ch√≠ thay ƒë·ªïi
        #     if obj.criterion != current_criterion:
        #         current_criterion = obj.criterion
        #         stt_within_criterion = 0

        #     # Ki·ªÉm tra n·∫øu m√£ minh ch·ª©ng thay ƒë·ªïi
        #     if obj.attest_id != current_attest_id:
        #         current_attest_id = obj.attest_id
        #         stt_within_criterion += 1

        #     # Th√™m h√†ng m·ªõi v√†o b·∫£ng
        #     row = table.add_row()
        #     cells = row.cells

        #     # Ti√™u ch√≠: Ch·ªâ hi·ªÉn th·ªã n·∫øu l√† l·∫ßn ƒë·∫ßu ti√™n xu·∫•t hi·ªán
        #     if obj.criterion == current_criterion and row._index > 1:  # Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i h√†ng ƒë·∫ßu ti√™n
        #         displayed_criterion = ""
        #         for previous_row in table.rows[:row._index]:
        #             if previous_row.cells[0].text == str(obj.criterion):
        #                 displayed_criterion = ""
        #                 break
        #             else:
        #                 displayed_criterion = str(obj.criterion)
        #         cells[0].text = displayed_criterion
        #     else:
        #         cells[0].text = str(obj.criterion)
        #     run = cells[0].paragraphs[0].runs[0]
        #     run.bold = True

        #     # STT: Hi·ªÉn th·ªã s·ªë th·ª© t·ª± trong ti√™u ch√≠
        #     if obj.attest_id == current_attest_id and row._index > 1:
        #         displayed_stt = ""
        #         for previous_row in table.rows[:row._index]:
        #             if previous_row.cells[2].text == obj.attest_id:
        #                 displayed_stt = ""
        #                 break
        #             else:
        #                 displayed_stt = str(stt_within_criterion)
        #         cells[1].text = displayed_stt
        #     else:
        #         cells[1].text = str(stt_within_criterion)

        #     # M√£ minh ch·ª©ng: Ch·ªâ hi·ªÉn th·ªã n·∫øu l√† l·∫ßn ƒë·∫ßu ti√™n
        #     if obj.attest_id == current_attest_id and row._index > 1:
        #         displayed_attest = ""
        #         for previous_row in table.rows[:row._index]:
        #             if previous_row.cells[2].text == obj.attest_id:
        #                 displayed_attest = ""
        #                 break
        #             else:
        #                 displayed_attest = obj.attest_id
        #         cells[2].text = displayed_attest
        #     else:
        #         cells[2].text = obj.attest_id

        #     # T√™n minh ch·ª©ng
        #     cells[3].text = obj.title or ''

        #     # S·ªë ng√†y ban h√†nh
        #     cells[4].text = obj.body or ''

        #     # N∆°i ban h√†nh
        #     cells[5].text = obj.performer or ''

        #     # Ghi ch√∫
        #     cells[6].text = obj.note or ''
        
        # ======================================================================

        # # ===== DANH M·ª§C MINH CH·ª®NG D√ôNG CHUNG =====
        # document.add_page_break()
        # title = document.add_paragraph("DANH M·ª§C C√ÅC VƒÇN B·∫¢N MINH CH·ª®NG D√ôNG CHUNG")
        # title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        # run = title.runs[0]
        # run.bold = True
        # run.font.size = Pt(14)

        # headers_common = ['STT', 'T√™n vƒÉn b·∫£n', 'M√£ minh ch·ª©ng']
        # table_common = document.add_table(rows=1, cols=3)
        # table_common.style = 'Table Grid'
        # hdr_cells = table_common.rows[0].cells
        # for i, header in enumerate(headers_common):
        #     para = hdr_cells[i].paragraphs[0]
        #     run = para.add_run(header)
        #     run.bold = True

        # from .models import common_attest
        # common_queryset = common_attest.objects.order_by('common_attest_stt')

        # for cm_attest in common_queryset:
        #     row = table_common.add_row()
        #     cells = row.cells
        #     cells[0].text = cm_attest.common_attest_stt
        #     cells[1].text = cm_attest.title
        #     cells[2].text = cm_attest.common_attest_id


        # Xu·∫•t file
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )
        response['Content-Disposition'] = 'attachment; filename="DanhMucMinhChung.docx"'
        document.save(response)
        return response
    
    
    

@admin.register(common_attest)
# class common_attestAdmin(ImportExportActionModelAdmin, admin.ModelAdmin):
class common_attestAdmin(admin.ModelAdmin):
    form = CommonAttestForm
    inlines = [PhotoCommonAttestInline]
    
    def save_related(self, request, form, formsets, change):
        super().save_related(request, form, formsets, change)
        form.save_photos(form.instance)
    
    list_display = ('common_attest_id_name','common_attest_stt', 'title', 'body', 'performer')
    list_display_links = ('title',)
    # list_filter = (
    #     #'criterion',
    #     # for ordinary fields
    #     #('criterion', DropdownFilter),
    #     # for choice fields
    #     #('criterion', ChoiceDropdownFilter),
    #     # for related fields
    #     ('criterion', RelatedDropdownFilter),
    # )
    
    ordering = ( 'common_attest_id','common_attest_stt')
    search_fields = ('title', 'performer')
    # prepopulated_fields = {
    #     'slug': ['common_attest_id','common_attest_stt'],
    #     # 'common_attest_id':['box','criterion'],
    # }
    
    class Media:
        js = ('../static/js/custom_admin.js', 'https://cdnjs.cloudflare.com/ajax/libs/speakingurl/14.0.1/speakingurl.min.js')  # ƒê∆∞·ªùng d·∫´n file JS
        css = {
            'all': ('../static/css/custom_admin.css',)
        }
    def save_model(self, request, obj, form, change):
        """
        Ghi ƒë√® save_model c·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c attest li√™n k·∫øt v·ªõi common_attest.
        """
        super().save_model(request, obj, form, change)  # üîπ ƒê·∫£m b·∫£o obj ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi l·∫•y pk
        if change :
            action_type = "C·∫≠p nh·∫≠t minh ch·ª©ng d√πng chung"
        else :
            action_type = "Th√™m m·ªõi minh ch·ª©ng d√πng chung"
        admin_url = request.build_absolute_uri(reverse('admin:CTDT_common_attest_change', args=[obj.pk]))
        
        # T√¨m t·∫•t c·∫£ c√°c attest li√™n quan t·ªõi common_attest hi·ªán t·∫°i
        related_attests = attest.objects.filter(common_attest=obj)
        # C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng trong attest li√™n quan n·∫øu c·∫ßn
        for attest_instance in related_attests:
            attest_instance.title = obj.title  # ƒê·ªìng b·ªô tr∆∞·ªùng `title`
            attest_instance.body = obj.body  
            attest_instance.performer = obj.performer  
            attest_instance.note = obj.note  
            attest_instance.slug = obj.slug  
            # attest_instance.image = obj.image  
            
            attest_instance.criterion = obj.criterion  
            attest_instance.box = obj.box  
            attest_instance.save()  # L∆∞u thay ƒë·ªïi cho t·ª´ng instance
            
        
        # def update_photos():
        #     related_attests1 = attest.objects.filter(common_attest=obj)

        #     for attest_instance1 in related_attests1:
        #         attest_instance1.photos.all().delete()  # X√≥a ·∫£nh c≈©
                    
        #         for photo_common1 in obj.photos.all():
        #             PhotoAttest.objects.create(show=attest_instance1, photo=photo_common1.photo)    
        # transaction.on_commit(update_photos(obj))  # ƒê·∫£m b·∫£o ch·∫°y sau khi commit database
        
        transaction.on_commit(lambda: ActionConvert.update_photos(obj))  # ƒê·∫£m b·∫£o ch·∫°y sau khi commit database
        
        # X·ª≠ l√Ω c√°c PhotoAttest instances
        if 'photocommonattest_set' in form.cleaned_data:  # Ki·ªÉm tra xem c√≥ PhotoAttest instances trong form kh√¥ng
            for photo in form.cleaned_data['photocommonattest_set']:
                try:
                    self.inlines[0].clean_photo(photo)  # G·ªçi h√†m clean_photo n·∫øu c·∫ßn
                except forms.ValidationError as e:
                    raise forms.ValidationError(e)  # N√©m l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ
                photo.save()  # L∆∞u PhotoAttest instance
        
        # # EmailNotification.send_common_attest_email(request, [obj], action_type, admin_url)
        # transaction.on_commit(lambda: 
        #     EmailNotification.send_common_attest_email(request, [obj], action_type, admin_url)
        # )
    @admin.display(description="M√£ minh ch·ª©ng")
    
    def common_attest_id_name(self, obj):
        if self.model.objects.filter(common_attest_id=obj.common_attest_id, pk__lt=obj.pk).exists():
            return ""
        return f"{obj.common_attest_id}".upper()

    def delete_model(self, request, obj):
        """ G·ª≠i email khi x√≥a """
        # EmailNotification.send_common_attest_email(request, [obj], "X√≥a minh ch·ª©ng d√πng chung", "Delete")
        
        ActionConvert.delete_attests(obj)  # x√≥a ·∫£nh
        super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        """ G·ª≠i email ch·ª©a danh s√°ch attest b·ªã x√≥a tr∆∞·ªõc khi x√≥a """
        
        # delete photo
        for common_attest in queryset:
            ActionConvert.delete_attests(common_attest)  # X√≥a ·∫£nh li√™n quan
            for photo_attest in common_attest.photos.all():  # L·∫•y ·∫£nh li√™n k·∫øt
                if photo_attest.photo:
                    try:
                        thumbnail_path = get_thumbnailer(photo_attest.photo)['small'].path
                        if os.path.isfile(thumbnail_path):
                            os.remove(thumbnail_path)
                    except Exception:
                        pass  # B·ªè qua n·∫øu kh√¥ng c√≥ thumbnail

                    if os.path.isfile(photo_attest.photo.path):
                        os.remove(photo_attest.photo.path)
                    
                    # Ki·ªÉm tra th∆∞ m·ª•c t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
                    folder1 = os.path.dirname(photo_attest.photo.path)
                    # x√≥a index
                    remove_image_from_index(photo_attest.photo.path)
                    if os.path.exists(folder1) and not os.listdir(folder1):  # Ki·ªÉm tra th∆∞ m·ª•c r·ªóng
                        shutil.rmtree(folder1)
                    # # Ki·ªÉm tra v√† x√≥a folder n·∫øu r·ªóng (lo·∫°i b·ªè file ·∫©n n·∫øu c·∫ßn)
                    # remaining_files = [f for f in os.listdir(folder1) if not f.startswith('.')]
                    # if not remaining_files:
                    #     shutil.rmtree(folder1)
                    
                    
        
        # EmailNotification.send_common_attest_email(request, queryset, "X√≥a minh ch·ª©ng d√πng chung", "Delete")
        
        # G·ªçi ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh ƒë·ªÉ x√≥a c√°c attest
        super().delete_queryset(request, queryset)
        

# ch∆∞a c·∫≠p nh·∫≠t ƒë∆∞·ª£c slug , ·∫©n tr∆∞·ªùng slug khi ch·ªânh s·ª≠a, th√™m m·ªõi, c·∫≠p nh·∫≠t tr∆∞·ªùng trong ti√™u ch√≠ ==> xong

# Kh√¥ng g·ª≠i mail cho ad khi thao t√°c v·ªõi database, c·∫ßn t·∫°o m·ªõi 1 table l∆∞u c√°c th√¥ng tin ch·ªânh s·ª≠a c·ªßa ng∆∞·ªùi d√πng 
# ƒë·∫øn khi n√†o ng∆∞·ªùi d√πng g·ª≠i th√¥ng b√°o cho admin th√¨ s·∫Ω l·∫•y h·∫øt th√¥ng tin trong b·∫£ng ƒë√≥ g·ª≠i cho admin
