class attestAdmin(ImportExportActionModelAdmin, admin.ModelAdmin):
    
    change_list_template = "admin/CTDT/attest/change_list.html"

    # def get_urls(self):
    #     urls = super().get_urls()
    #     custom_urls = [
    #         path('train-model/', self.admin_site.admin_view(self.train_model_view), name='CTDT_trainmodel'),
    #     ]
    #     return custom_urls + urls
    # # @method_decorator(staff_member_required)
    # def train_model_view(self, request):
    #     # X·ª≠ l√Ω logic train model ·ªü ƒë√¢y
    #     if request.method == "POST":
    #         # Gi·∫£ s·ª≠ h√†m train_model() th·ª±c hi·ªán qu√° tr√¨nh train m√¥ h√¨nh
    #         try:
    #             train_model(request)
    #             dj_messages.success(request, "M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c train l·∫°i th√†nh c√¥ng.")
    #         except Exception as e:
    #             dj_messages.error(request, f"L·ªói train m√¥ h√¨nh: {e}")
    #         return redirect("..")
    #     return render(request, "admin/train_model.html", context={})
    
    
    form = AttestForm
    inlines = [PhotoAttestInline]

    def save_related(self, request, form, formsets, change):
        super().save_related(request, form, formsets, change)
        form.save_photos(form.instance)
    
    list_display = ('criterion_name', 'attest_id_name','attest_stt', 'title', 'body', 'performer')
    list_display_links = ('title',)
    list_filter = (
        #'criterion',
        # for ordinary fields
        #('criterion', DropdownFilter),
        # for choice fields
        #('criterion', ChoiceDropdownFilter),
        # for related fields
        ('criterion', RelatedDropdownFilter),
    )
    
    ordering = ( 'attest_id','attest_stt')
    search_fields = ('title', 'performer')
    # prepopulated_fields = {'slug': ['attest_id','attest_stt']}
    
    # def get_readonly_fields(self, request, obj=None):
    #     """
    #     L√†m cho t·∫•t c·∫£ c√°c tr∆∞·ªùng readonly n·∫øu ƒë√¢y l√† minh ch·ª©ng d√πng chung.
    #     """
    #     if obj and obj.common_attest is not None:  # N·∫øu c√≥ li√™n k·∫øt v·ªõi common_attest
    #         # L·∫•y danh s√°ch c√°c tr∆∞·ªùng c√≥ trong form
    #         form_fields = [field.name for field in self.model._meta.fields]
    #         # Lo·∫°i b·ªè c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi form
    #         readonly_fields = [field for field in form_fields if field in self.form.declared_fields]
    #         return readonly_fields
    #     return super().get_readonly_fields(request, obj)
    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        # if obj:
        #     if obj.common_attest is not None:  # N·∫øu l√† minh ch·ª©ng d√πng chung
        #         for field_name in form.base_fields:
        #             form.base_fields[field_name].disabled = True  # V√¥ hi·ªáu h√≥a tr∆∞·ªùng
        # else:
        #     form.base_fields['is_common'].disabled = True
        if obj:
            if obj.common_attest is not None:  # N·∫øu l√† minh ch·ª©ng d√πng chung
                for field_name in form.base_fields:
                    form.base_fields[field_name].disabled = True  # V√¥ hi·ªáu h√≥a tr∆∞·ªùng
            else:
                form.base_fields['common_attest'].disabled = True
                form.base_fields['is_common'].disabled = True
                if 'photos' in form.base_fields:
                    form.base_fields['photos'].disabled = False
        # else:
        #     form.base_fields['is_common'].disabled = True
        # return form
        # T·∫°o l·ªõp con ƒë·ªÉ override __init__ v√† truy·ªÅn request v√†o form
        class FormWithRequest(form):
            def __init__(self2, *args, **inner_kwargs):
                inner_kwargs['request'] = request
                super().__init__(*args, **inner_kwargs)
        return FormWithRequest
    
    def render_change_form(self, request, context, add=False, change=False, form_url="", obj=None):
        if obj and obj.common_attest is not None:  # N·∫øu l√† minh ch·ª©ng d√πng chung
            context['show_save'] = False  # ·∫®n n√∫t l∆∞u
            context['show_save_and_continue'] = False
            context['show_save_and_add_another'] = False
        else:
            context['show_save'] = True
            context['show_save_and_continue'] = True
            context['show_save_and_add_another'] = True
        return super().render_change_form(request, context, add, change, form_url, obj)
    

    def save_model(self, request, obj, form, change):
        
        super().save_model(request, obj, form, change)  # üîπ ƒê·∫£m b·∫£o obj ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi l·∫•y pk
        if change :
            action_type = "C·∫≠p nh·∫≠t minh ch·ª©ng"
        else :
            action_type = "Th√™m m·ªõi minh ch·ª©ng"
        admin_url = request.build_absolute_uri(reverse('admin:CTDT_attest_change', args=[obj.pk]))
        
        
        if not change and obj.common_attest : 
            # obj.is_common = bool(obj.common_attest)  # G√°n True n·∫øu common_attest c√≥ gi√° tr·ªã
            common_attest_data = obj.common_attest
            obj.attest_id = common_attest_data.common_attest_id
            obj.attest_stt = common_attest_data.common_attest_stt
            obj.title = common_attest_data.title
            obj.body = common_attest_data.body
            obj.performer = common_attest_data.performer
            obj.note = "DC"
            obj.slug = common_attest_data.slug
            # obj.image = common_attest_data.image
            # obj.criterion = common_attest_data.criterion
            obj.box = common_attest_data.box
            obj.is_common = True
            
        else:
            obj.is_common = False
        
        
        user = request.user
        send_mail_obj, created = ProfileUser.objects.get_or_create(user=user)
        if send_mail_obj.SendMailUser:
            dj_messages.success(request, f"‚úÖ Check send mail user {send_mail_obj.SendMailUser}")
        # # # EmailNotification.send_attest_email(request, [obj], action_type, admin_url)
        # # EmailNotification.send_attest_email(request, [obj], action_type)
        # transaction.on_commit(lambda: 
        #     EmailNotification.send_attest_email(request, [obj], action_type)
        # )
        super().save_model(request, obj, form, change)
        
        # X·ª≠ l√Ω c√°c PhotoAttest instances
        if 'photoattest_set' in form.cleaned_data:  # Ki·ªÉm tra xem c√≥ PhotoAttest instances trong form kh√¥ng
            for photo in form.cleaned_data['photoattest_set']:
                try:
                    self.inlines[0].clean_photo(photo)  # G·ªçi h√†m clean_photo n·∫øu c·∫ßn
                except forms.ValidationError as e:
                    raise forms.ValidationError(e)  # N√©m l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ
                photo.save()  # L∆∞u PhotoAttest instance
    
    def delete_model(self, request, obj):
        """ G·ª≠i email khi x√≥a """
        
        user = request.user
        send_mail_obj, created = ProfileUser.objects.get_or_create(user=user)
        if send_mail_obj.SendMailUser:
            dj_messages.success(request, f"‚úÖ Check send mail user {send_mail_obj.SendMailUser}")
        
        # # EmailNotification.send_attest_email(request, [obj], "X√≥a minh ch·ª©ng", "Delete")
        # EmailNotification.send_attest_email(request, [obj], "X√≥a minh ch·ª©ng")
        
        super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        """ G·ª≠i email ch·ª©a danh s√°ch attest b·ªã x√≥a tr∆∞·ªõc khi x√≥a """
        # delete photo
        for attest in queryset:
            for photo_attest in attest.photos.all():  # L·∫•y ·∫£nh li√™n k·∫øt
                if photo_attest.photo:
                    try:
                        thumbnail_path = get_thumbnailer(photo_attest.photo)['small'].path
                        if os.path.isfile(thumbnail_path):
                            os.remove(thumbnail_path)
                    except Exception:
                        pass  # B·ªè qua n·∫øu kh√¥ng c√≥ thumbnail

                    if os.path.isfile(photo_attest.photo.path):
                        os.remove(photo_attest.photo.path)
                    folder = os.path.dirname(photo_attest.photo.path)
                    # x√≥a index
                    remove_image_from_index(photo_attest.photo.path)
                    # Ki·ªÉm tra v√† x√≥a folder n·∫øu r·ªóng (lo·∫°i b·ªè file ·∫©n n·∫øu c·∫ßn)
                    remaining_files = [f for f in os.listdir(folder) if not f.startswith('.')]
                    if not remaining_files:
                        shutil.rmtree(folder)
        
        user = request.user
        send_mail_obj, created = ProfileUser.objects.get_or_create(user=user)
        if send_mail_obj.SendMailUser:
            dj_messages.success(request, f"‚úÖ Check send mail user {send_mail_obj.SendMailUser}")
        
        # # EmailNotification.send_attest_email(request, queryset, "X√≥a minh ch·ª©ng", "Delete")
        # EmailNotification.send_attest_email(request, queryset, "X√≥a minh ch·ª©ng")
        
        # G·ªçi ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh ƒë·ªÉ x√≥a c√°c attest
        super().delete_queryset(request, queryset)
    
    class Media:
        js = ('../static/js/custom_admin.js', 'https://cdnjs.cloudflare.com/ajax/libs/speakingurl/14.0.1/speakingurl.min.js')  # ƒê∆∞·ªùng d·∫´n file JS
        css = {
            'all': ('../static/css/custom_admin.css',)
        }
    @admin.display(description="Ti√™u ch√≠")
    def criterion_name(self, obj):
        if self.model.objects.filter(criterion=obj.criterion, pk__lt=obj.pk).exists():
            return ""
        # return f"{obj.criterion} {obj.title}".upper()
        return f"{obj.criterion}"
    @admin.display(description="M√£ minh ch·ª©ng")
    def attest_id_name(self, obj):
        if self.model.objects.filter(attest_id=obj.attest_id, pk__lt=obj.pk).exists():
            return ""
        return f"{obj.attest_id}".upper()
    
    #  # Th√™m ƒë∆∞·ªùng d·∫´n cho action nh·∫≠p file Word
    # def get_urls(self):
    #     urls = super().get_urls()
    #     custom_urls = [
    #         path('import-word/', self.import_word, name='import_word'),
    #     ]
    #     return custom_urls + urls
    
    # # Giao di·ªán t·∫£i file Word
    # def import_word(self, request):
    #     from django.template.response import TemplateResponse
    #     from django.core.files.uploadedfile import UploadedFile

    #     if request.method == "POST" and request.FILES.get('word_file'):
    #         word_file = request.FILES['word_file']
    #         if isinstance(word_file, UploadedFile):
    #             self.handle_uploaded_word(word_file)
    #             self.message_user(request, "File Word ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.")
    #             return HttpResponse(".")
    #     return TemplateResponse(request, "admin/import_word.html", context={})
    
    
    actions = ['export_to_word']
    def export_to_word(self, request, queryset):

        # T·∫°o file Word m·ªõi
        document = Document()

        # Th√™m ti√™u ƒë·ªÅ ch√≠nh
        title = document.add_paragraph("DANH M·ª§C MINH CH·ª®NG")
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title.runs[0].font.size = Pt(14)
        title.runs[0].bold = True

        # T·∫°o b·∫£ng v·ªõi 5 c·ªôt
        table = document.add_table(rows=1, cols=5)
        table.style = 'Table Grid'

        # ƒê·ªãnh nghƒ©a header
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Ti√™u ch√≠'
        hdr_cells[1].text = 'STT (trong ti√™u ch√≠)'
        hdr_cells[2].text = 'M√£ minh ch·ª©ng'
        hdr_cells[3].text = 'T√™n minh ch·ª©ng'
        hdr_cells[4].text = 'N∆°i ban h√†nh...'

        # Bi·∫øn theo d√µi ti√™u chu·∫©n v√† ti√™u ch√≠ hi·ªán t·∫°i
        current_standard = None
        current_criterion = None
        current_attest_id = None
        merge_criterion_cell = None
        merge_attest_cell = None
        merge_stt_cell = None
        stt_within_criterion = 0

        # S·∫Øp x·∫øp d·ªØ li·ªáu theo ti√™u chu·∫©n v√† ti√™u ch√≠
        sorted_queryset = queryset.order_by('criterion__standard', 'criterion', 'attest_id')

        for obj in sorted_queryset:
            # Ki·ªÉm tra ti√™u chu·∫©n (standard)
            if obj.criterion.standard != current_standard:
                # N·∫øu ti√™u chu·∫©n thay ƒë·ªïi, th√™m d√≤ng ti√™u chu·∫©n m·ªõi
                current_standard = obj.criterion.standard
                row_cells = table.add_row().cells
                row_cells[0].merge(row_cells[4])  # G·ªôp t·∫•t c·∫£ c√°c c·ªôt
                row_cells[0].text = f"Ti√™u chu·∫©n: {current_standard.title}"
                row_cells[0].paragraphs[0].runs[0].bold = True

            # Ki·ªÉm tra ti√™u ch√≠ (criterion)
            if obj.criterion != current_criterion:
                # N·∫øu ti√™u ch√≠ thay ƒë·ªïi, g·ªôp √¥ ti√™u ch√≠ tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
                if merge_criterion_cell is not None:
                    merge_criterion_cell.merge(row_cells[0])
                current_criterion = obj.criterion
                merge_criterion_cell = None
                stt_within_criterion = 0  # ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm STT

            # Ki·ªÉm tra m√£ minh ch·ª©ng (attest_id)
            if obj.attest_id != current_attest_id:
                # N·∫øu m√£ minh ch·ª©ng thay ƒë·ªïi, g·ªôp √¥ minh ch·ª©ng tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
                if merge_attest_cell is not None:
                    merge_attest_cell.merge(row_cells[2])
                if merge_stt_cell is not None:
                    merge_stt_cell.merge(row_cells[1])
                current_attest_id = obj.attest_id
                merge_attest_cell = None
                merge_stt_cell = None
                stt_within_criterion += 1

            # Th√™m d√≤ng chi ti·∫øt
            row_cells = table.add_row().cells

            # G√°n gi√° tr·ªã cho c·ªôt "Ti√™u ch√≠"
            if current_criterion == obj.criterion and merge_criterion_cell is None:
                merge_criterion_cell = row_cells[0]
                row_cells[0].text = str(obj.criterion)
            else:
                row_cells[0].text = ''

            # G√°n gi√° tr·ªã cho c·ªôt "STT trong ti√™u ch√≠"
            if current_attest_id == obj.attest_id and merge_stt_cell is None:
                merge_stt_cell = row_cells[1]
                row_cells[1].text = str(stt_within_criterion)
            else:
                row_cells[1].text = ''

            # G√°n gi√° tr·ªã cho c·ªôt "M√£ minh ch·ª©ng"
            if current_attest_id == obj.attest_id and merge_attest_cell is None:
                merge_attest_cell = row_cells[2]
                row_cells[2].text = obj.attest_id
            else:
                row_cells[2].text = ''

            # G√°n gi√° tr·ªã cho c√°c c·ªôt kh√°c
            row_cells[3].text = obj.title  # T√™n minh ch·ª©ng
            row_cells[4].text = obj.performer  # N∆°i ban h√†nh

        # G·ªôp √¥ cu·ªëi c√πng n·∫øu c√≤n d∆∞
        if merge_criterion_cell is not None:
            merge_criterion_cell.merge(row_cells[0])
        if merge_attest_cell is not None:
            merge_attest_cell.merge(row_cells[2])
        if merge_stt_cell is not None:
            merge_stt_cell.merge(row_cells[1])

        # L∆∞u t√†i li·ªáu v√†o HTTP response
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )
        response['Content-Disposition'] = 'attachment; filename="DanhMucMinhChung.docx"'
        document.save(response)
        return response